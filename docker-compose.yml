version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15
    container_name: booking_db
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-booking_db}
      POSTGRES_USER: ${POSTGRES_USER:-booking_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-booking_password}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./migrations/init:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-booking_user} -d ${POSTGRES_DB:-booking_db}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # FastAPI Backend
  api:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: booking_api
    environment:
      - DATABASE_URL=${DATABASE_URL}
      - API_HOST=${API_HOST:-0.0.0.0}
      - API_PORT=${API_PORT:-8000}
      - PYTHON_ENV=${PYTHON_ENV:-development}
    ports:
      - "${API_PORT:-8000}:${API_PORT:-8000}"
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/app
    command: uvicorn main:app --host 0.0.0.0 --port 8000 --reload
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Next.js Frontend
  web:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: booking_web
    environment:
      - NEXT_PUBLIC_API_URL=${NEXT_PUBLIC_API_URL:-http://localhost:8000}
      - NODE_ENV=${NODE_ENV:-development}
    ports:
      - "${WEB_PORT:-3000}:3000"
    depends_on:
      api:
        condition: service_healthy
    volumes:
      - ./web:/app
      - /app/node_modules
    command: npm run dev

  # Database Migrations
  migrations:
    build:
      context: ./api
      dockerfile: Dockerfile
    container_name: booking_migrations
    environment:
      - DATABASE_URL=${DATABASE_URL}
    depends_on:
      db:
        condition: service_healthy
    volumes:
      - ./api:/app
      - ./migrations:/migrations
    command: alembic upgrade head
    profiles:
      - migrate

volumes:
  postgres_data:
